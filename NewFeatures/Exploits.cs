using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Kingmaker.Blueprints;
using Kingmaker.Blueprints.Classes;
using Kingmaker.Blueprints.Classes.Prerequisites;
using Kingmaker.Blueprints.Classes.Selection;
using Kingmaker.Blueprints.Classes.Spells;
using Kingmaker.Blueprints.Facts;
using Kingmaker.Blueprints.Items;
using Kingmaker.Blueprints.Items.Ecnchantments;
using Kingmaker.Blueprints.Root;
using Kingmaker.Designers.Mechanics.Buffs;
using Kingmaker.Designers.Mechanics.Facts;
using Kingmaker.ElementsSystem;
using Kingmaker.EntitySystem.Stats;
using Kingmaker.Enums;
using Kingmaker.Enums.Damage;
using Kingmaker.Localization;
using Kingmaker.ResourceLinks;
using Kingmaker.RuleSystem;
using Kingmaker.UI.Common;
using Kingmaker.UnitLogic;
using Kingmaker.UnitLogic.Abilities;
using Kingmaker.UnitLogic.Abilities.Blueprints;
using Kingmaker.UnitLogic.Abilities.Components;
using Kingmaker.UnitLogic.Abilities.Components.AreaEffects;
using Kingmaker.UnitLogic.Abilities.Components.Base;
using Kingmaker.UnitLogic.Abilities.Components.CasterCheckers;
using Kingmaker.UnitLogic.ActivatableAbilities;
using Kingmaker.UnitLogic.Alignments;
using Kingmaker.UnitLogic.Buffs.Blueprints;
using Kingmaker.UnitLogic.Commands.Base;
using Kingmaker.UnitLogic.FactLogic;
using Kingmaker.UnitLogic.Mechanics;
using Kingmaker.UnitLogic.Mechanics.Actions;
using Kingmaker.UnitLogic.Mechanics.Components;
using Kingmaker.UnitLogic.Mechanics.Conditions;
using Kingmaker.UnitLogic.Parts;
using Kingmaker.Utility;
using static Kingmaker.UnitLogic.ActivatableAbilities.ActivatableAbilityResourceLogic;
using static Kingmaker.UnitLogic.Commands.Base.UnitCommand;

namespace ArcanistTweaks
{
    class Exploits
    {
        //static public BlueprintFeature metamixing;
        //static public BlueprintBuff metamixing_buff;
        //static void createMetamixing()
        //{
        //    var abundantCasting = Resources.GetBlueprint<BlueprintFeature>("cf594fa8871332a4ba861c6002480ec2");
        //    var arcanist = Resources.GetBlueprint<BlueprintCharacterClass>("52dbfd8505e22f84fad8d702611f60b7");
        //    var arcanist_resource = Resources.GetBlueprint<BlueprintAbilityResource>("cac948cbbe79b55459459dd6a8fe44ce");


        //    var buff = Helpers.CreateBuff("MetamixingExploitBuff",
        //                                    "Metamixing",
        //                                    "The arcanist can expend 1 point from her arcane reservoir to cast a spell with one spontaneously applied metamgic feat without affecting the casting time. She can also use this ability with spells that she prepared using metamagic feats.",
        //                                    "",
        //                                    abundantCasting.m_Icon,
        //                                    null,
        //                                    Helpers.Create<SpellManipulationMechanics.Metamixing>(),
        //                                    Helpers.Create<NewMechanics.SpendResourceOnSpellCast>(s => { s.spellbook = null; s.resource = arcanist_resource; s.used_for_reducing_metamagic_cast_time = true; s.is_metamixing = true; })); ;

        //    var ability = Helpers.CreateActivatableAbility("MetamixingExplotToggleAbility",
        //                                                   buff.Name,
        //                                                   buff.Description,
        //                                                   "",
        //                                                   buff.Icon,
        //                                                   buff,
        //                                                   AbilityActivationType.Immediately,
        //                                                   CommandType.Free,
        //                                                   null,
        //                                                   Helpers.CreateActivatableResourceLogic(, ResourceSpendType.Never)
        //                                                   );
        //    ability.DeactivateImmediately = true;

        //    metamixing = Helpers.CreateFeature("MetamixingExploitFeature",
        //                                       ability.Name,
        //                                       ability.Description,
        //                                       "",
        //                                       ability.Icon,
        //                                       FeatureGroup.None,
        //                                       Helpers.CreateAddFact(ability)
        //                                       );

        //    metamixing_buff = buff;
    }
}
